import matplotlib.pyplot as plt
import numpy as np

# VIOLIN PLOT OF LAST VALUESs

# 30 esperiments
"""number_of_rabbits_basic = [1005, 1042, 1070, 1015, 1015, 1024, 1011, 1053, 
1032, 1021, 1015, 1029, 1038, 1045, 1032, 1035, 1023, 1034, 1071, 1005, 
1048, 1033, 1017, 1020, 1021, 1058, 1026, 1051, 1033, 1061]
number_of_rabbits_grass = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
number_of_rabbits_repr = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
number_of_rabbits_all = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
number_of_foxes_basic = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
number_of_foxes_grass = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
number_of_foxes_repr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
number_of_foxes_all = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

## combine these different collections into a list
data_to_plot = [number_of_rabbits_basic, number_of_foxes_basic, 
number_of_rabbits_grass, number_of_foxes_grass, number_of_rabbits_repr, 
number_of_foxes_repr, number_of_rabbits_all, number_of_foxes_all]
# Create a figure instance
fig, ax1 = plt.subplots()
val = ax1.violinplot(data_to_plot, showmeans=True, showextrema=True, showmedians=True)

ax1.set_xlabel("Experiment",size = 16,alpha=0.7)
ax1.set_ylabel("Number of agents",size = 16,alpha=0.7)
plt.legend(["rabbit", "fox"], loc='upper right')
plt.savefig('pupu3.png')"""

# BASIC FRAME/NUMBER OF ANIMALS PLOT CODE 

"""for i in range(30):
    rabbits = []
    foxes = []
    frames_rabbit = []
    frames_fox = []
    grass = []
    frames_grass = []

    filename = "competition_{}.csv".format(i)
    df = open(filename, 'r').readlines()

    for i in range(len(df)):
        line = df[i].split(',')
        if line[1] == 'rabbit' and line[2] == 'alive':
            rabbits.append(int(line[-1]))
            frames_rabbit.append(int(line[0]))
        elif line[1] == 'fox' and line[2] == 'alive':
            foxes.append(int(line[-1]))
            frames_fox.append(int(line[0]))
        elif line[1] == 'grass' and line[2] == 'alive' and int(line[0]) < 2500:
            grass.append(int(line[-1]))
            frames_grass.append(int(line[0]))

    # plot lines
    plt.plot(frames_rabbit, rabbits, color='blue')
    plt.plot(frames_fox, foxes, color='red')
    plt.plot(frames_grass, grass, color='green')
plt.legend(["rabbits", "foxes", "grass"])
plt.xlabel('Frame')
plt.ylabel('Number of agents')
plt.savefig('line_all.png')"""


def set_axis_style(ax, labels):
    ax.xaxis.set_tick_params(direction='out')
    ax.xaxis.set_ticks_position('bottom')
    ax.set_xticks(np.arange(1, len(labels) + 1), labels=labels)
    ax.set_xlim(0.25, len(labels) + 0.75)
    ax.set_xlabel('Sample name')

# VIOLIN PLOT CODE FOR ALL/ONE SIMULATIONS:
"""data_to_plot = []

for i in range(15,16):
    rabbits = []
    foxes = []
    frames = []

    filename = "competition_sexual_reproduction_{}.csv".format(i)
    df = open(filename, 'r').readlines()

    for i in range(len(df)):
        line = df[i].split(',')
        if line[1] == 'rabbit' and line[2] == 'alive':
            rabbits.append(int(line[-1]))
            frames.append(int(line[0]))
            foxes.append(0)
        elif line[1] == 'fox' and line[2] == 'alive':
            foxes.append(int(line[-1]))
            frames.append(int(line[0]))
            rabbits.append(0)

    data_to_plot.append(rabbits)
    data_to_plot.append(foxes)
    
fig, ax1 = plt.subplots()
val = ax1.violinplot(data_to_plot, showmeans=True, showextrema=True, showmedians=True)
for j in range(len(val['bodies'])):
    if j % 2 == 0:
        val['bodies'][j].set_facecolor('blue')
        val['bodies'][j].set_edgecolor('darkblue')
    else:
        val['bodies'][j].set_facecolor('red')
        val['bodies'][j].set_edgecolor('darkred')

# set style for the axes
labels = ['rabbit', 'fox']
#'1', '', '2', '', '3', '', '4', '', '5', '', '6', '', '7', '', 
#'8', '', '9', '', '10', '', '11', '', '12', '', '13', '', '14', '', '15', 
#'', '16', '', '17', '', '18', '', '19', '', '20', '', '21', '', '22', '', 
#'23', '', '24', '', '25', '', '26', '', '27', '', '28', '', '29', '', '30', '']
set_axis_style(ax1, labels)

ax1.set_xlabel("Simulation 15",size = 16,alpha=0.7)
ax1.set_ylabel("Number of agents",size = 16,alpha=0.7)
plt.legend(["rabbit", "fox"], loc='upper left')
plt.savefig('violin2.png')"""


# VIOLIN PLOT CODE FOR ALL MODELS & ONE SIMULATION:
"""data_to_plot = []

for i in ["competition_basic_15.csv", "competition_grass_15.csv", "competition_sexual_reproduction_15.csv", "competition_15.csv"]:
    print(i)
    rabbits = []
    foxes = []
    frames = []

    df = open(i, 'r').readlines()

    for i in range(len(df)):
        line = df[i].split(',')
        if line[1] == 'rabbit' and line[2] == 'alive':
            rabbits.append(int(line[-1]))
            frames.append(int(line[0]))
            foxes.append(0)
        elif line[1] == 'fox' and line[2] == 'alive':
            foxes.append(int(line[-1]))
            frames.append(int(line[0]))
            rabbits.append(0)

    data_to_plot.append(rabbits)
    data_to_plot.append(foxes)
    
fig, ax1 = plt.subplots()
val = ax1.violinplot(data_to_plot, showmeans=True, showextrema=True, showmedians=True)
for j in range(len(val['bodies'])):
    if j % 2 == 0:
        val['bodies'][j].set_facecolor('blue')
    else:
        val['bodies'][j].set_edgecolor('red')

ax1.set_xlabel("Simulation 15",size = 16,alpha=0.7)
ax1.set_ylabel("Number of agents",size = 16,alpha=0.7)
plt.legend(["rabbit", "fox"], loc='upper left')
plt.savefig('pupu4.png')"""

# Violin plot using the average
data_to_plot = [[1002.2100555555555, 1037.8561111111112, 1065.692611111111, 
1011.9576666666667, 1011.335, 1023.5805, 1007.9995555555555, 1048.9965555555555, 
1028.4416666666666, 1017.5154444444445, 1010.9132777777778, 1024.9553888888888, 
1033.7517777777778, 1040.7602777777777, 1028.7697222222223, 1031.6127777777779, 
1019.5807222222222, 1029.929111111111, 1066.7317777777778, 1001.7514444444445, 
1044.596388888889, 1029.0738888888889, 1013.4684444444445, 1016.3645555555555, 
1017.3605555555556, 1052.9975555555557, 1022.7487222222222, 1046.402, 1029.1728333333333, 
1056.735], [1.2820555555555555, 2.1755555555555555, 2.1548333333333334, 
1.1432222222222221, 1.6435, 1.5474444444444444, 1.3873888888888888, 
2.000277777777778, 1.525611111111111, 1.7818333333333334, 2.114888888888889, 
2.0171111111111113, 2.0950555555555557, 2.204, 1.2839444444444446, 1.4411666666666667, 
1.5445555555555555, 1.8798333333333332, 2.057111111111111, 1.2785555555555554, 
1.5843888888888888, 1.846111111111111, 1.7253888888888889, 1.6733333333333333, 
1.7036666666666667, 2.7657777777777777, 1.4494444444444445, 2.282388888888889, 
1.8695555555555556, 2.214277777777778], [28.221666666666668, 22.555833333333332, 
31.87688888888889, 28.688666666666666, 27.309333333333335, 30.712666666666667, 
30.155666666666665, 28.380055555555554, 26.737944444444445, 24.83577777777778, 
32.04227777777778, 30.538555555555554, 33.381388888888885, 24.973166666666668, 
26.75261111111111, 24.06961111111111, 27.288611111111113, 27.430333333333333, 
27.25611111111111, 30.680777777777777, 28.935555555555556, 29.08716666666667, 
28.976111111111113, 25.068666666666665, 27.275, 24.867, 27.977888888888888, 
28.955444444444446, 24.223055555555554, 26.333555555555556], [30.9875, 
27.558222222222224, 16.46488888888889, 31.0105, 25.425666666666668, 19.026611111111112, 
18.238888888888887, 18.844333333333335, 21.513055555555557, 23.25911111111111, 
21.121388888888887, 18.632555555555555, 19.364833333333333, 29.69977777777778, 
26.125611111111112, 30.212444444444444, 26.011222222222223, 28.649444444444445, 
28.367277777777776, 19.918555555555557, 26.806555555555555, 26.88072222222222, 
32.59755555555556, 27.569666666666667, 32.152833333333334, 26.41261111111111, 
29.888666666666666, 26.327444444444446, 34.19738888888889, 45.63005555555556], 
[970.1776666666667, 976.8353888888889, 965.232, 975.5645555555556, 977.1531111111111, 
972.9003888888889, 974.6396111111111, 976.2406111111111, 940.3912222222223, 
961.4321111111111, 968.9668333333333, 980.3966666666666, 936.2334444444444, 
968.4994444444444, 972.0645, 944.6614444444444, 966.8746111111111, 948.8821666666666, 
959.2351666666667, 924.2053333333333, 964.4095, 971.9036111111111, 956.4744444444444, 
924.8145, 966.2675555555555, 966.7038888888889, 968.2427222222223, 945.2525555555555, 
973.3043333333334, 964.6762777777777], [0.1418888888888889, 0.1466111111111111, 
0.15266666666666667, 0.15205555555555555, 0.14633333333333334, 0.14433333333333334, 
0.14466666666666667, 0.14838888888888888, 0.15372222222222223, 0.14177777777777778, 
0.14655555555555555, 0.14055555555555554, 0.1471111111111111, 0.15222222222222223, 
0.14172222222222222, 0.14466666666666667, 0.14672222222222223, 0.1507777777777778, 
0.13944444444444445, 0.1453888888888889, 0.1537777777777778, 0.154, 0.14677777777777778, 
0.14405555555555555, 0.1481111111111111, 0.15022222222222223, 0.14933333333333335, 
0.15033333333333335, 0.16427777777777777, 0.14938888888888888], [4.728555555555555, 
5.222222222222222, 4.914611111111111, 5.425, 4.914444444444444, 5.131444444444444, 
4.887555555555555, 5.192388888888889, 5.0405, 5.025388888888889, 5.214333333333333, 
5.232611111111111, 4.688833333333333, 5.158222222222222, 5.3486666666666665, 
5.196555555555555, 4.693277777777777, 4.870388888888889, 5.001111111111111, 
4.942166666666667, 5.064055555555556, 4.953777777777778, 5.1273888888888886, 
5.158166666666666, 5.054611111111111, 5.0808333333333335, 5.270166666666666, 
5.041, 4.709222222222222, 4.985444444444444], [0.14183333333333334, 0.14827777777777779, 
0.149, 0.13972222222222222, 0.13794444444444445, 0.14227777777777778, 0.12977777777777777, 
0.1475, 0.13866666666666666, 0.13522222222222222, 0.1423888888888889, 0.13777777777777778, 
0.14777777777777779, 0.1343888888888889, 0.1383888888888889, 0.13972222222222222, 
0.1418888888888889, 0.145, 0.13827777777777778, 0.13822222222222222, 0.1393888888888889, 
0.14094444444444446, 0.13666666666666666, 0.14016666666666666, 0.14277777777777778, 
0.14416666666666667, 0.14027777777777778, 0.1401111111111111, 0.14433333333333334, 
0.1416111111111111]]
"""data_to_plot = [[1002.2100555555555, 1037.8561111111112, 1065.692611111111, 
1011.9576666666667, 1011.335, 1023.5805, 1007.9995555555555, 1048.9965555555555, 
1028.4416666666666, 1017.5154444444445, 1010.9132777777778, 1024.9553888888888, 
1033.7517777777778, 1040.7602777777777, 1028.7697222222223, 1031.6127777777779, 
1019.5807222222222, 1029.929111111111, 1066.7317777777778, 1001.7514444444445, 
1044.596388888889, 1029.0738888888889, 1013.4684444444445, 1016.3645555555555, 
1017.3605555555556, 1052.9975555555557, 1022.7487222222222, 1046.402, 1029.1728333333333, 
1056.735], [1.2820555555555555, 2.1755555555555555, 2.1548333333333334, 
1.1432222222222221, 1.6435, 1.5474444444444444, 1.3873888888888888, 
2.000277777777778, 1.525611111111111, 1.7818333333333334, 2.114888888888889, 
2.0171111111111113, 2.0950555555555557, 2.204, 1.2839444444444446, 1.4411666666666667, 
1.5445555555555555, 1.8798333333333332, 2.057111111111111, 1.2785555555555554, 
1.5843888888888888, 1.846111111111111, 1.7253888888888889, 1.6733333333333333, 
1.7036666666666667, 2.7657777777777777, 1.4494444444444445, 2.282388888888889, 
1.8695555555555556, 2.214277777777778]] 
"""
"""data_to_plot = [[28.221666666666668, 22.555833333333332, 
31.87688888888889, 28.688666666666666, 27.309333333333335, 30.712666666666667, 
30.155666666666665, 28.380055555555554, 26.737944444444445, 24.83577777777778, 
32.04227777777778, 30.538555555555554, 33.381388888888885, 24.973166666666668, 
26.75261111111111, 24.06961111111111, 27.288611111111113, 27.430333333333333, 
27.25611111111111, 30.680777777777777, 28.935555555555556, 29.08716666666667, 
28.976111111111113, 25.068666666666665, 27.275, 24.867, 27.977888888888888, 
28.955444444444446, 24.223055555555554, 26.333555555555556], [30.9875, 
27.558222222222224, 16.46488888888889, 31.0105, 25.425666666666668, 19.026611111111112, 
18.238888888888887, 18.844333333333335, 21.513055555555557, 23.25911111111111, 
21.121388888888887, 18.632555555555555, 19.364833333333333, 29.69977777777778, 
26.125611111111112, 30.212444444444444, 26.011222222222223, 28.649444444444445, 
28.367277777777776, 19.918555555555557, 26.806555555555555, 26.88072222222222, 
32.59755555555556, 27.569666666666667, 32.152833333333334, 26.41261111111111, 
29.888666666666666, 26.327444444444446, 34.19738888888889, 45.63005555555556]]
"""
"""data_to_plot = [[970.1776666666667, 976.8353888888889, 965.232, 975.5645555555556, 977.1531111111111, 
972.9003888888889, 974.6396111111111, 976.2406111111111, 940.3912222222223, 
961.4321111111111, 968.9668333333333, 980.3966666666666, 936.2334444444444, 
968.4994444444444, 972.0645, 944.6614444444444, 966.8746111111111, 948.8821666666666, 
959.2351666666667, 924.2053333333333, 964.4095, 971.9036111111111, 956.4744444444444, 
924.8145, 966.2675555555555, 966.7038888888889, 968.2427222222223, 945.2525555555555, 
973.3043333333334, 964.6762777777777], [0.1418888888888889, 0.1466111111111111, 
0.15266666666666667, 0.15205555555555555, 0.14633333333333334, 0.14433333333333334, 
0.14466666666666667, 0.14838888888888888, 0.15372222222222223, 0.14177777777777778, 
0.14655555555555555, 0.14055555555555554, 0.1471111111111111, 0.15222222222222223, 
0.14172222222222222, 0.14466666666666667, 0.14672222222222223, 0.1507777777777778, 
0.13944444444444445, 0.1453888888888889, 0.1537777777777778, 0.154, 0.14677777777777778, 
0.14405555555555555, 0.1481111111111111, 0.15022222222222223, 0.14933333333333335, 
0.15033333333333335, 0.16427777777777777, 0.14938888888888888]]"""
"""data_to_plot = [[4.728555555555555, 
5.222222222222222, 4.914611111111111, 5.425, 4.914444444444444, 5.131444444444444, 
4.887555555555555, 5.192388888888889, 5.0405, 5.025388888888889, 5.214333333333333, 
5.232611111111111, 4.688833333333333, 5.158222222222222, 5.3486666666666665, 
5.196555555555555, 4.693277777777777, 4.870388888888889, 5.001111111111111, 
4.942166666666667, 5.064055555555556, 4.953777777777778, 5.1273888888888886, 
5.158166666666666, 5.054611111111111, 5.0808333333333335, 5.270166666666666, 
5.041, 4.709222222222222, 4.985444444444444], [0.14183333333333334, 0.14827777777777779, 
0.149, 0.13972222222222222, 0.13794444444444445, 0.14227777777777778, 0.12977777777777777, 
0.1475, 0.13866666666666666, 0.13522222222222222, 0.1423888888888889, 0.13777777777777778, 
0.14777777777777779, 0.1343888888888889, 0.1383888888888889, 0.13972222222222222, 
0.1418888888888889, 0.145, 0.13827777777777778, 0.13822222222222222, 0.1393888888888889, 
0.14094444444444446, 0.13666666666666666, 0.14016666666666666, 0.14277777777777778, 
0.14416666666666667, 0.14027777777777778, 0.1401111111111111, 0.14433333333333334, 
0.1416111111111111]]"""
fig, ax1 = plt.subplots()
val = ax1.violinplot(data_to_plot, showmeans=True, showextrema=True, showmedians=True)
for j in range(len(val['bodies'])):
    if j % 2 == 0:
        val['bodies'][j].set_facecolor('blue')
        val['bodies'][j].set_edgecolor('darkblue')
    else:
        val['bodies'][j].set_facecolor('red')
        val['bodies'][j].set_edgecolor('darkred')

# set style for the axes
labels = ['Model 0', '', 'Model 1', '', 'Model 2', '', 'Model 3', '']
#labels = ['rabbit', 'fox']
set_axis_style(ax1, labels)

ax1.set_xlabel("Models",size = 16,alpha=0.7)
#ax1.set_xlabel("Model 0",size = 16,alpha=0.7)
ax1.set_ylabel("Number of agents",size = 16,alpha=0.7)
plt.legend(["rabbit", "fox"], loc='upper right')
plt.savefig('violin_average.png')


